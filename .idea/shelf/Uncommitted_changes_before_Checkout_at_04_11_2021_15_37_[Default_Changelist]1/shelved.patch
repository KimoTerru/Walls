Index: app/src/main/java/it/kimoterru/walls/ui/image/SelectedImageFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.kimoterru.walls.ui.image\r\n\r\nimport android.app.Dialog\r\nimport android.app.DownloadManager\r\nimport android.app.WallpaperManager\r\nimport android.content.Context\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.drawable.BitmapDrawable\r\nimport android.graphics.drawable.Drawable\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.os.Environment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.navigation.fragment.navArgs\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.load.DataSource\r\nimport com.bumptech.glide.load.engine.GlideException\r\nimport com.bumptech.glide.request.RequestListener\r\nimport com.bumptech.glide.request.target.Target\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport it.kimoterru.walls.R\r\nimport it.kimoterru.walls.databinding.FragmentSelectedImageBinding\r\n\r\n@AndroidEntryPoint\r\nclass SelectedImageFragment : Fragment(R.layout.fragment_selected_image), View.OnClickListener {\r\n    private var _binding: FragmentSelectedImageBinding? = null\r\n    private val binding get() = _binding!!\r\n\r\n    private val args: SelectedImageFragmentArgs by navArgs()\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n        _binding = FragmentSelectedImageBinding.inflate(inflater)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        initObservers()\r\n        fragmentComponent()\r\n    }\r\n\r\n    private fun fragmentComponent() {\r\n        binding.cardBrush.setOnClickListener(this)\r\n        binding.cardDown.setOnClickListener(this)\r\n        binding.cardInfo.setOnClickListener(this)\r\n        hideFragmentComponent()\r\n    }\r\n\r\n    private fun hideFragmentComponent() {\r\n        binding.cardBrush.visibility = View.GONE\r\n        binding.cardDown.visibility = View.GONE\r\n        binding.cardInfo.visibility = View.GONE\r\n    }\r\n\r\n    private fun showFragmentComponent() {\r\n        binding.cardBrush.visibility = View.VISIBLE\r\n        binding.cardDown.visibility = View.VISIBLE\r\n        binding.cardInfo.visibility = View.VISIBLE\r\n    }\r\n\r\n    private fun initObservers() {\r\n        binding.progressBar.showProgressBar()\r\n        Glide.with(binding.selectedImage).load(args.urlImage).listener(object : RequestListener<Drawable> {\r\n            override fun onLoadFailed(e: GlideException?, model: Any?, target: Target<Drawable>?, isFirstResource: Boolean): Boolean {\r\n                Toast.makeText(context, \"Load failed\", Toast.LENGTH_SHORT).show()\r\n                binding.progressBar.showProgressBar()\r\n                hideFragmentComponent()\r\n                return false\r\n            }\r\n\r\n            override fun onResourceReady(resource: Drawable?, model: Any?, target: Target<Drawable>?, dataSource: DataSource?, isFirstResource: Boolean): Boolean {\r\n                binding.progressBar.hideProgressBar()\r\n                showFragmentComponent()\r\n                return false\r\n            }\r\n        }).into(binding.selectedImage)\r\n    }\r\n\r\n    override fun onClick(v: View?) {\r\n        when(v!!.id) {\r\n            R.id.card_brush -> {\r\n                val wallpaperManager = WallpaperManager.getInstance(context)\r\n                val bitmap = (binding.selectedImage.drawable as BitmapDrawable).bitmap\r\n                wallpaperManager.setBitmap(bitmap)\r\n                Toast.makeText(context, \"Done\", Toast.LENGTH_SHORT).show()\r\n            }\r\n            R.id.card_down -> {\r\n                Toast.makeText(context, \"Start download...\", Toast.LENGTH_LONG).show()\r\n\r\n                val dm: DownloadManager = requireActivity().getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager\r\n                val fileName = args.idImage + \".jpg\"\r\n                val request = DownloadManager.Request(Uri.parse(args.urlDownload))\r\n                request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE or DownloadManager.Request.NETWORK_WIFI)\r\n                request.setTitle(fileName)\r\n                request.setDescription(\"Wait a second...\")\r\n                request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)\r\n                request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, fileName)\r\n                dm.enqueue(request)\r\n            }\r\n            R.id.card_info -> {\r\n                val dialog = Dialog(requireContext())\r\n                dialog.setCancelable(true)\r\n                dialog.setContentView(R.layout.dialog_info_selected_image)\r\n\r\n                val id = dialog.findViewById<TextView>(R.id.id)\r\n                val created = dialog.findViewById<TextView>(R.id.created)\r\n                val updated = dialog.findViewById<TextView>(R.id.updated)\r\n                val username = dialog.findViewById<TextView>(R.id.username)\r\n                val name = dialog.findViewById<TextView>(R.id.name)\r\n\r\n                id.text = args.idImage\r\n                created.text = args.createdImage\r\n                updated.text = args.updatedImage\r\n                username.text = args.userNameImage\r\n                name.text = args.nameImage\r\n\r\n                dialog.show()\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {\r\n        super.onRequestPermissionsResult(requestCode, permissions, grantResults)\r\n        if (requestCode == 15) {\r\n            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\r\n                Toast.makeText(context, \"Great, now select an image\", Toast.LENGTH_SHORT).show()\r\n            } else {\r\n                Toast.makeText(context, \"Allow access to files\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/ui/image/SelectedImageFragment.kt b/app/src/main/java/it/kimoterru/walls/ui/image/SelectedImageFragment.kt
--- a/app/src/main/java/it/kimoterru/walls/ui/image/SelectedImageFragment.kt	
+++ b/app/src/main/java/it/kimoterru/walls/ui/image/SelectedImageFragment.kt	
@@ -1,6 +1,5 @@
 package it.kimoterru.walls.ui.image
 
-import android.app.Dialog
 import android.app.DownloadManager
 import android.app.WallpaperManager
 import android.content.Context
@@ -13,9 +12,9 @@
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
-import android.widget.TextView
 import android.widget.Toast
 import androidx.fragment.app.Fragment
+import androidx.fragment.app.viewModels
 import androidx.navigation.fragment.navArgs
 import com.bumptech.glide.Glide
 import com.bumptech.glide.load.DataSource
@@ -32,6 +31,7 @@
     private val binding get() = _binding!!
 
     private val args: SelectedImageFragmentArgs by navArgs()
+    private val viewModel: SelectedImageViewModel by viewModels()
 
     override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
         _binding = FragmentSelectedImageBinding.inflate(inflater)
@@ -45,6 +45,11 @@
         fragmentComponent()
     }
 
+    override fun onResume() {
+        super.onResume()
+        viewModel.getPhoto(args.idImage)
+    }
+
     private fun fragmentComponent() {
         binding.cardBrush.setOnClickListener(this)
         binding.cardDown.setOnClickListener(this)
@@ -65,21 +70,35 @@
     }
 
     private fun initObservers() {
-        binding.progressBar.showProgressBar()
-        Glide.with(binding.selectedImage).load(args.urlImage).listener(object : RequestListener<Drawable> {
-            override fun onLoadFailed(e: GlideException?, model: Any?, target: Target<Drawable>?, isFirstResource: Boolean): Boolean {
-                Toast.makeText(context, "Load failed", Toast.LENGTH_SHORT).show()
-                binding.progressBar.showProgressBar()
-                hideFragmentComponent()
-                return false
-            }
+        viewModel.photoLiveData.observe(viewLifecycleOwner, {
+            binding.progressBar.showProgressBar()
+            Glide.with(binding.selectedImage).load(it.urls.regular)
+                .listener(object : RequestListener<Drawable> {
+                    override fun onLoadFailed(
+                        e: GlideException?,
+                        model: Any?,
+                        target: Target<Drawable>?,
+                        isFirstResource: Boolean
+                    ): Boolean {
+                        Toast.makeText(context, "Load failed", Toast.LENGTH_SHORT).show()
+                        binding.progressBar.showProgressBar()
+                        hideFragmentComponent()
+                        return false
+                    }
 
-            override fun onResourceReady(resource: Drawable?, model: Any?, target: Target<Drawable>?, dataSource: DataSource?, isFirstResource: Boolean): Boolean {
-                binding.progressBar.hideProgressBar()
-                showFragmentComponent()
-                return false
-            }
-        }).into(binding.selectedImage)
+                    override fun onResourceReady(
+                        resource: Drawable?,
+                        model: Any?,
+                        target: Target<Drawable>?,
+                        dataSource: DataSource?,
+                        isFirstResource: Boolean
+                    ): Boolean {
+                        binding.progressBar.hideProgressBar()
+                        showFragmentComponent()
+                        return false
+                    }
+                }).into(binding.selectedImage)
+        })
     }
 
     override fun onClick(v: View?) {
@@ -93,7 +112,7 @@
             R.id.card_down -> {
                 Toast.makeText(context, "Start download...", Toast.LENGTH_LONG).show()
 
-                val dm: DownloadManager = requireActivity().getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager
+                /*val dm: DownloadManager = requireActivity().getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager
                 val fileName = args.idImage + ".jpg"
                 val request = DownloadManager.Request(Uri.parse(args.urlDownload))
                 request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE or DownloadManager.Request.NETWORK_WIFI)
@@ -101,10 +120,10 @@
                 request.setDescription("Wait a second...")
                 request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
                 request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, fileName)
-                dm.enqueue(request)
+                dm.enqueue(request)*/
             }
             R.id.card_info -> {
-                val dialog = Dialog(requireContext())
+                /*val dialog = Dialog(requireContext())
                 dialog.setCancelable(true)
                 dialog.setContentView(R.layout.dialog_info_selected_image)
 
@@ -120,7 +139,7 @@
                 username.text = args.userNameImage
                 name.text = args.nameImage
 
-                dialog.show()
+                dialog.show()*/
             }
         }
     }
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'kotlin-android'\r\n    id 'kotlin-kapt'\r\n    id 'dagger.hilt.android.plugin'\r\n    id(\"androidx.navigation.safeargs.kotlin\")\r\n}\r\n\r\nandroid {\r\n    compileSdkVersion 31\r\n    buildToolsVersion \"30.0.3\"\r\n\r\n    defaultConfig {\r\n        applicationId \"it.kimoterru.walls\"\r\n        minSdkVersion 23\r\n        targetSdkVersion 31\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = '1.8'\r\n    }\r\n    buildFeatures {\r\n        viewBinding true\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\r\n    implementation 'androidx.core:core-ktx:1.6.0'\r\n    implementation 'androidx.appcompat:appcompat:1.3.1'\r\n    implementation 'com.google.android.material:material:1.4.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'\r\n    //noinspection GradleDynamicVersion\r\n    testImplementation 'junit:junit:4.+'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.3'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'\r\n\r\n    // Fragment\r\n    implementation 'androidx.fragment:fragment-ktx:1.3.6'\r\n\r\n    // ViewModel\r\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1\"\r\n\r\n    //Glide\r\n    implementation 'com.github.bumptech.glide:glide:4.12.0'\r\n    implementation('com.github.bumptech.glide:okhttp3-integration:4.11.0') {\r\n        exclude group: 'glide-parent'\r\n    }\r\n\r\n    // Retrofit2\r\n    def retrofit_version = \"2.9.0\"\r\n    implementation \"com.squareup.retrofit2:retrofit:$retrofit_version\"\r\n    implementation \"com.squareup.retrofit2:converter-gson:$retrofit_version\"\r\n    implementation \"com.squareup.okhttp3:logging-interceptor:4.9.1\"\r\n\r\n    // Hilt\r\n    def hilt_version = \"2.37\"\r\n    implementation \"com.google.dagger:hilt-android:$hilt_version\"\r\n    kapt \"com.google.dagger:hilt-compiler:$hilt_version\"\r\n\r\n    // Navigation\r\n    def navigation_version = \"2.3.5\"\r\n    implementation \"androidx.navigation:navigation-fragment-ktx:$navigation_version\"\r\n    implementation \"androidx.navigation:navigation-ui-ktx:$navigation_version\"\r\n\r\n    // Custom View\r\n    implementation 'com.github.shadowalker77:wp7progressbar:1.1.0' // Progress bar\r\n    implementation 'com.facebook.shimmer:shimmer:0.5.0' //Shimmer effect\r\n}\r\nkapt {\r\n    correctErrorTypes true\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	
+++ b/app/build.gradle	
@@ -39,9 +39,8 @@
 }
 
 dependencies {
-
     implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
-    implementation 'androidx.core:core-ktx:1.6.0'
+    implementation 'androidx.core:core-ktx:1.7.0'
     implementation 'androidx.appcompat:appcompat:1.3.1'
     implementation 'com.google.android.material:material:1.4.0'
     implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
@@ -50,17 +49,15 @@
     androidTestImplementation 'androidx.test.ext:junit:1.1.3'
     androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
 
-    // Fragment
+    // Architecture
     implementation 'androidx.fragment:fragment-ktx:1.3.6'
-
-    // ViewModel
-    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
+    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0"
+    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.4.0"
+    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.0"
 
     //Glide
     implementation 'com.github.bumptech.glide:glide:4.12.0'
-    implementation('com.github.bumptech.glide:okhttp3-integration:4.11.0') {
-        exclude group: 'glide-parent'
-    }
+    kapt 'com.github.bumptech.glide:compiler:4.12.0'
 
     // Retrofit2
     def retrofit_version = "2.9.0"
Index: app/src/main/java/it/kimoterru/walls/models/photo/Location.kt
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/models/photo/Location.kt b/app/src/main/java/it/kimoterru/walls/models/photo/Location.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/it/kimoterru/walls/models/photo/Location.kt	
@@ -0,0 +1,10 @@
+package it.kimoterru.walls.models.photo
+
+import com.google.gson.annotations.SerializedName
+
+data class Location(
+    @SerializedName("city")
+    val city: String,
+    @SerializedName("country")
+    val country: String
+)
\ No newline at end of file
Index: app/src/main/res/layout/dialog_info_selected_image.xml
===================================================================
diff --git a/app/src/main/res/layout/dialog_info_selected_image.xml b/app/src/main/res/layout/bottom_sheet_layout.xml
rename from app/src/main/res/layout/dialog_info_selected_image.xml
rename to app/src/main/res/layout/bottom_sheet_layout.xml
--- a/app/src/main/res/layout/dialog_info_selected_image.xml	
+++ b/app/src/main/res/layout/bottom_sheet_layout.xml	
@@ -1,100 +1,256 @@
 <?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:tools="http://schemas.android.com/tools"
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
     android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:orientation="vertical">
+    android:layout_height="match_parent">
+
+    <LinearLayout
+        android:id="@+id/layout_top"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent">
+
+        <androidx.cardview.widget.CardView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginHorizontal="10dp"
+            android:layout_marginTop="10dp"
+            app:cardCornerRadius="16dp"
+            app:cardElevation="0dp">
+
+            <ImageView
+                android:id="@+id/image_profile"
+                android:layout_width="80dp"
+                android:layout_height="80dp"
+                android:importantForAccessibility="no"
+                app:srcCompat="@drawable/ic_launcher_foreground" />
+
+        </androidx.cardview.widget.CardView>
+
+        <LinearLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center"
+            android:layout_marginTop="4dp"
+            android:orientation="vertical">
 
+            <TextView
+                android:id="@+id/name"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:text="Joe Example"
+                android:textColor="@color/black"
+                android:textSize="30sp"
+                android:textStyle="bold" />
+
+            <TextView
+                android:id="@+id/location"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_gravity="center"
+                android:text="Montreal Canada"
+                android:textSize="18sp" />
+
+        </LinearLayout>
+
+    </LinearLayout>
+
+    <TextView
+        android:id="@+id/info"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="18dp"
+        android:text="@string/info"
+        android:textColor="@color/black"
+        android:textSize="22sp"
+        android:textStyle="bold"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/layout_top" />
+
     <LinearLayout
-        android:layout_width="match_parent"
+        android:id="@+id/linear_info"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="18dp"
+        android:orientation="vertical"
+        app:layout_constraintLeft_toLeftOf="parent"
+        app:layout_constraintRight_toLeftOf="@id/linear_data"
+        app:layout_constraintTop_toBottomOf="@+id/info">
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Image ID"
+            android:textColor="@color/black" />
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Resolution"
+            android:textColor="@color/black" />
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Сreated"
+            android:textColor="@color/black" />
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Color"
+            android:textColor="@color/black" />
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Downloads"
+            android:textColor="@color/black" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/linear_data"
+        android:layout_width="0dp"
         android:layout_height="wrap_content"
-        android:orientation="horizontal"
-        tools:ignore="RtlSymmetry,UselessParent">
+        android:layout_marginEnd="18dp"
+        android:orientation="vertical"
+        app:layout_constraintLeft_toRightOf="@id/linear_info"
+        app:layout_constraintRight_toRightOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/info">
 
         <TextView
+            android:id="@+id/id_image"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:text="id:"
-            android:textSize="20sp" />
+            android:text="Dwu85P9SOIk" />
 
         <TextView
-            android:id="@+id/id"
+            android:id="@+id/resolution"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_marginStart="10dp"
-            android:text="mskaosdSASQas21"
-            android:textSize="20sp" />
-
-    </LinearLayout>
+            android:text="2021x2022" />
 
-    <TextView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="created:"
-        android:textSize="20sp" />
+        <TextView
+            android:id="@+id/created"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="2016-05-03T11:00:28-04:00" />
 
-    <TextView
-        android:id="@+id/created"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="12.23.44"
-        android:textSize="20sp" />
+        <TextView
+            android:id="@+id/color_image"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="#6E633A" />
 
-    <TextView
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:text="updated:"
-        android:textSize="20sp" />
+        <TextView
+            android:id="@+id/downloads"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="1345" />
+
+    </LinearLayout>
+
+    <!--Your comment-->
 
     <TextView
-        android:id="@+id/updated"
+        android:id="@+id/camera"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:text="12.23.44"
-        android:textSize="20sp" />
+        android:layout_marginStart="17dp"
+        android:text="Camera"
+        android:textColor="@color/black"
+        android:textSize="22sp"
+        android:textStyle="bold"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/linear_info" />
 
     <LinearLayout
-        android:layout_width="match_parent"
+        android:id="@+id/linear_camera_info"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="18dp"
+        android:layout_marginBottom="10dp"
+        android:orientation="vertical"
+        app:layout_constraintLeft_toLeftOf="parent"
+        app:layout_constraintRight_toLeftOf="@id/linear_data"
+        app:layout_constraintTop_toBottomOf="@+id/camera">
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Name"
+            android:textColor="@color/black" />
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Exposure time"
+            android:textColor="@color/black" />
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Aperture"
+            android:textColor="@color/black" />
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Focal length"
+            android:textColor="@color/black" />
+
+        <TextView
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="ISO"
+            android:textColor="@color/black" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/linear_camera_data"
+        android:layout_width="0dp"
         android:layout_height="wrap_content"
-        android:orientation="horizontal"
-        tools:ignore="RtlSymmetry,UselessParent">
+        android:layout_marginEnd="18dp"
+        android:orientation="vertical"
+        app:layout_constraintLeft_toRightOf="@id/linear_camera_info"
+        app:layout_constraintRight_toRightOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/camera">
 
         <TextView
+            android:id="@+id/camera_name"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:text="username:"
-            android:textSize="20sp" />
+            android:text="Canon, EOS 40D" />
 
         <TextView
-            android:id="@+id/username"
+            android:id="@+id/exposure"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_marginStart="10dp"
-            android:text="poorkane"
-            android:textSize="20sp" />
+            android:text="0.011111111111111112" />
 
-    </LinearLayout>
-
-    <LinearLayout
-        android:layout_width="match_parent"
-        android:layout_height="wrap_content"
-        android:orientation="horizontal"
-        tools:ignore="RtlSymmetry,UselessParent">
+        <TextView
+            android:id="@+id/aperture"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="4.970854" />
 
         <TextView
+            android:id="@+id/focal"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:text="name:"
-            android:textSize="20sp" />
+            android:text="37" />
 
         <TextView
-            android:id="@+id/name"
+            android:id="@+id/iso"
             android:layout_width="wrap_content"
             android:layout_height="wrap_content"
-            android:layout_marginStart="10dp"
-            android:text="Gilbert Kane"
-            android:textSize="20sp" />
+            android:text="100" />
 
     </LinearLayout>
 
-</LinearLayout>
\ No newline at end of file
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/it/kimoterru/walls/models/photo/PhotoItem.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.kimoterru.walls.models.photo\r\n\r\nimport com.google.gson.annotations.SerializedName\r\n\r\ndata class PhotoItem(\r\n    @SerializedName(\"blur_hash\")\r\n    val blurHash: String,\r\n    @SerializedName(\"color\")\r\n    val color: String,\r\n    @SerializedName(\"created_at\")\r\n    val createdAt: String,\r\n    @SerializedName(\"current_user_collections\")\r\n    val currentUserCollections: List<UserCollection>,\r\n    @SerializedName(\"description\")\r\n    val description: String,\r\n    @SerializedName(\"height\")\r\n    val height: Int,\r\n    @SerializedName(\"id\")\r\n    val id: String,\r\n    @SerializedName(\"liked_by_user\")\r\n    val likedByUser: Boolean,\r\n    @SerializedName(\"likes\")\r\n    val likes: Int,\r\n    @SerializedName(\"links\")\r\n    val links: PhotoLinks,\r\n    @SerializedName(\"updated_at\")\r\n    val updatedAt: String,\r\n    @SerializedName(\"urls\")\r\n    val urls: PhotoUrls,\r\n    @SerializedName(\"user\")\r\n    val user: User,\r\n    @SerializedName(\"width\")\r\n    val width: Int\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/models/photo/PhotoItem.kt b/app/src/main/java/it/kimoterru/walls/models/photo/PhotoItem.kt
--- a/app/src/main/java/it/kimoterru/walls/models/photo/PhotoItem.kt	
+++ b/app/src/main/java/it/kimoterru/walls/models/photo/PhotoItem.kt	
@@ -23,6 +23,12 @@
     val likes: Int,
     @SerializedName("links")
     val links: PhotoLinks,
+    @SerializedName("location")
+    val location: Location,
+    @SerializedName("downloads")
+    val downloads: Int,
+    @SerializedName("exif")
+    val exif: Exif,
     @SerializedName("updated_at")
     val updatedAt: String,
     @SerializedName("urls")
Index: app/src/main/res/navigation/nav_graph.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<navigation xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    android:id=\"@+id/nav_graph\"\r\n    app:startDestination=\"@id/fragment_home\">\r\n\r\n    <fragment\r\n        android:id=\"@+id/fragment_home\"\r\n        android:name=\"it.kimoterru.walls.ui.home.HomeFragment\"\r\n        android:label=\"@string/home\"\r\n        tools:layout=\"@layout/fragment_home\">\r\n        <action\r\n            android:id=\"@+id/action_fragment_home_to_fragment_no_internet\"\r\n            app:destination=\"@id/fragment_no_internet\" />\r\n        <action\r\n            android:id=\"@+id/action_fragment_home_to_fragment_selected_image\"\r\n            app:destination=\"@id/fragment_selected_image\" />\r\n        <action\r\n            android:id=\"@+id/action_fragment_home_to_fragment_categories\"\r\n            app:destination=\"@id/fragment_categories\" />\r\n        <action\r\n            android:id=\"@+id/action_fragment_home_to_fragment_colors\"\r\n            app:destination=\"@id/fragment_colors\" />\r\n        <action\r\n            android:id=\"@+id/action_fragment_home_to_fragment_search\"\r\n            app:destination=\"@id/fragment_search\" />\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/fragment_saved\"\r\n        android:name=\"it.kimoterru.walls.ui.save.SavedFragment\"\r\n        tools:layout=\"@layout/fragment_saved\">\r\n        <action\r\n            android:id=\"@+id/action_fragment_saved_to_fragment_empty_saved\"\r\n            app:destination=\"@id/fragment_empty_saved\" />\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/fragment_profile\"\r\n        android:name=\"it.kimoterru.walls.ui.profile.ProfileFragment\"\r\n        tools:layout=\"@layout/fragment_profile\">\r\n        <action\r\n            android:id=\"@+id/action_fragment_profile_to_fragment_empty_user_profile\"\r\n            app:destination=\"@id/fragment_empty_user_profile\" />\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/fragment_no_internet\"\r\n        android:name=\"it.kimoterru.walls.ui.networkConnection.NoInternetConnectionFragment\"\r\n        tools:layout=\"@layout/fragment_no_internet_connection\" />\r\n\r\n    <fragment\r\n        android:id=\"@+id/fragment_empty_saved\"\r\n        android:name=\"it.kimoterru.walls.ui.save.EmptySavedFragment\"\r\n        tools:layout=\"@layout/fragment_empty_saved_wallpaper\" />\r\n\r\n    <fragment\r\n        android:id=\"@+id/fragment_selected_image\"\r\n        android:name=\"it.kimoterru.walls.ui.image.SelectedImageFragment\"\r\n        tools:layout=\"@layout/fragment_selected_image\">\r\n        <argument\r\n            android:name=\"id_image\"\r\n            app:argType=\"string\" />\r\n        <argument\r\n            android:name=\"url_image\"\r\n            app:argType=\"string\" />\r\n        <argument\r\n            android:name=\"url_download\"\r\n            app:argType=\"string\" />\r\n        <argument\r\n            android:name=\"created_Image\"\r\n            app:argType=\"string\" />\r\n        <argument\r\n            android:name=\"updated_Image\"\r\n            app:argType=\"string\" />\r\n        <argument\r\n            android:name=\"userName_image\"\r\n            app:argType=\"string\" />\r\n        <argument\r\n            android:name=\"name_image\"\r\n            app:argType=\"string\" />\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/fragment_categories\"\r\n        android:name=\"it.kimoterru.walls.ui.category.CategoryFragment\"\r\n        tools:layout=\"@layout/fragment_categories\">\r\n        <argument\r\n            android:name=\"slug\"\r\n            app:argType=\"string\" />\r\n        <argument\r\n            android:name=\"tittle\"\r\n            app:argType=\"string\" />\r\n        <argument\r\n            android:name=\"totalPhotos\"\r\n            app:argType=\"integer\" />\r\n        <action\r\n            android:id=\"@+id/action_fragment_categories_to_fragment_selected_image\"\r\n            app:destination=\"@id/fragment_selected_image\"\r\n            app:enterAnim=\"@android:anim/fade_in\"\r\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\r\n            app:popEnterAnim=\"@android:anim/fade_in\"\r\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\" />\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/fragment_colors\"\r\n        android:name=\"it.kimoterru.walls.ui.color.ColorsFragment\"\r\n        tools:layout=\"@layout/fragment_colors\">\r\n\r\n        <action\r\n            android:id=\"@+id/action_fragment_colors_to_fragment_selected_image\"\r\n            app:destination=\"@id/fragment_selected_image\"\r\n            app:enterAnim=\"@android:anim/fade_in\"\r\n            app:exitAnim=\"@anim/nav_default_exit_anim\"\r\n            app:popEnterAnim=\"@android:anim/fade_in\"\r\n            app:popExitAnim=\"@anim/nav_default_pop_exit_anim\" />\r\n        <argument\r\n            android:name=\"tittle\"\r\n            app:argType=\"string\" />\r\n    </fragment>\r\n\r\n    <fragment\r\n        android:id=\"@+id/fragment_empty_user_profile\"\r\n        android:name=\"it.kimoterru.walls.ui.profile.EmptyUserFragment\"\r\n        tools:layout=\"@layout/fragment_empty_user_profile\" />\r\n\r\n    <fragment\r\n        android:id=\"@+id/fragment_search\"\r\n        android:name=\"it.kimoterru.walls.ui.search.SearchFragment\"\r\n        tools:layout=\"@layout/fragment_search\" >\r\n        <argument\r\n            android:name=\"query\"\r\n            app:argType=\"string\" />\r\n        <action\r\n            android:id=\"@+id/action_fragment_search_to_fragment_selected_image\"\r\n            app:destination=\"@id/fragment_selected_image\" />\r\n    </fragment>\r\n\r\n</navigation>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/navigation/nav_graph.xml b/app/src/main/res/navigation/nav_graph.xml
--- a/app/src/main/res/navigation/nav_graph.xml	
+++ b/app/src/main/res/navigation/nav_graph.xml	
@@ -62,24 +62,6 @@
         <argument
             android:name="id_image"
             app:argType="string" />
-        <argument
-            android:name="url_image"
-            app:argType="string" />
-        <argument
-            android:name="url_download"
-            app:argType="string" />
-        <argument
-            android:name="created_Image"
-            app:argType="string" />
-        <argument
-            android:name="updated_Image"
-            app:argType="string" />
-        <argument
-            android:name="userName_image"
-            app:argType="string" />
-        <argument
-            android:name="name_image"
-            app:argType="string" />
     </fragment>
 
     <fragment
Index: app/src/main/java/it/kimoterru/walls/repo/WallpaperRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.kimoterru.walls.repo\r\n\r\nimport it.kimoterru.walls.models.categories.TopicItem\r\nimport it.kimoterru.walls.models.photo.PhotoItem\r\nimport it.kimoterru.walls.models.search.SearchItem\r\nimport it.kimoterru.walls.network.ApiService\r\nimport javax.inject.Inject\r\n\r\nclass WallpaperRepository @Inject constructor(private var service: ApiService) {\r\n    suspend fun getLatestPhotos(\r\n        clientId: String, page: Int,\r\n    ): List<PhotoItem> {\r\n        return service.getLatest(clientId, page)\r\n    }\r\n\r\n    suspend fun getTopics(\r\n        clientId: String,\r\n        page: Int,\r\n        per_page: Int,\r\n        order_by: String,\r\n    ): List<TopicItem> {\r\n        return service.getTopicsList(clientId, page, per_page, order_by)\r\n    }\r\n\r\n    suspend fun getImageTopics(\r\n        id_or_slug: String,\r\n        clientId: String,\r\n        per_page: Int,\r\n        order_by: String\r\n    ): List<PhotoItem> {\r\n        return service.getTopicImage(id_or_slug, clientId, per_page, order_by)\r\n    }\r\n\r\n    suspend fun getImageColors(\r\n        query: String,\r\n        color: String,\r\n        clientId: String,\r\n        per_page: Int,\r\n        order_by: String\r\n    ): SearchItem {\r\n        return service.getColorImage(query, color, clientId, per_page, order_by)\r\n    }\r\n\r\n    suspend fun getImageSearch(\r\n        query: String,\r\n        clientId: String,\r\n        per_page: Int,\r\n        order_by: String,\r\n    ): SearchItem {\r\n        return service.getSearchImage(query, clientId, per_page, order_by)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/repo/WallpaperRepository.kt b/app/src/main/java/it/kimoterru/walls/repo/WallpaperRepository.kt
--- a/app/src/main/java/it/kimoterru/walls/repo/WallpaperRepository.kt	
+++ b/app/src/main/java/it/kimoterru/walls/repo/WallpaperRepository.kt	
@@ -13,6 +13,10 @@
         return service.getLatest(clientId, page)
     }
 
+    suspend fun getPhoto(id: String, clientId: String): PhotoItem {
+        return service.getPhoto(id, clientId)
+    }
+
     suspend fun getTopics(
         clientId: String,
         page: Int,
Index: app/src/main/java/it/kimoterru/walls/adapter/home/LatestAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.kimoterru.walls.adapter.home\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport androidx.annotation.LayoutRes\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.bumptech.glide.Glide\r\nimport it.kimoterru.walls.R\r\nimport it.kimoterru.walls.adapter.WallpaperClickListener\r\nimport it.kimoterru.walls.models.photo.PhotoItem\r\n\r\nclass LatestAdapter(\r\n    val data: List<PhotoItem>,\r\n    private val listener: WallpaperClickListener.WallpaperClick,\r\n    @LayoutRes val viewId: Int\r\n) : RecyclerView.Adapter<LatestAdapter.ViewHolder>() {\r\n\r\n    class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        val image: ImageView = itemView.findViewById(R.id.card_wallpaper)\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        return ViewHolder(\r\n            LayoutInflater.from(parent.context).inflate(viewId, parent, false)\r\n        )\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val item = data[position]\r\n        Glide.with(holder.image).load(item.urls.thumb).into(holder.image)\r\n        holder.image.setOnClickListener {\r\n            listener.onWallpaperClick(\r\n                item.id,\r\n                item.urls.full,\r\n                item.links.download,\r\n                item.createdAt,\r\n                item.updatedAt,\r\n                item.user.username,\r\n                item.user.name\r\n            )\r\n        }\r\n    }\r\n\r\n    override fun getItemCount() = data.size\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/adapter/home/LatestAdapter.kt b/app/src/main/java/it/kimoterru/walls/adapter/home/LatestAdapter.kt
--- a/app/src/main/java/it/kimoterru/walls/adapter/home/LatestAdapter.kt	
+++ b/app/src/main/java/it/kimoterru/walls/adapter/home/LatestAdapter.kt	
@@ -31,15 +31,7 @@
         val item = data[position]
         Glide.with(holder.image).load(item.urls.thumb).into(holder.image)
         holder.image.setOnClickListener {
-            listener.onWallpaperClick(
-                item.id,
-                item.urls.full,
-                item.links.download,
-                item.createdAt,
-                item.updatedAt,
-                item.user.username,
-                item.user.name
-            )
+            listener.onWallpaperClick(item.id)
         }
     }
 
Index: app/src/main/java/it/kimoterru/walls/models/photo/Exif.kt
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/models/photo/Exif.kt b/app/src/main/java/it/kimoterru/walls/models/photo/Exif.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/it/kimoterru/walls/models/photo/Exif.kt	
@@ -0,0 +1,16 @@
+package it.kimoterru.walls.models.photo
+
+import com.google.gson.annotations.SerializedName
+
+data class Exif(
+    @SerializedName("name")
+    val name: String,
+    @SerializedName("exposure_time")
+    val exposure_time: Double,
+    @SerializedName("aperture")
+    val aperture: Double,
+    @SerializedName("focal_length")
+    val focal_length: Int,
+    @SerializedName("iso")
+    val iso: Int
+)
\ No newline at end of file
Index: app/src/main/res/drawable/bottom_sheet_background.xml
===================================================================
diff --git a/app/src/main/res/drawable/bottom_sheet_background.xml b/app/src/main/res/drawable/bottom_sheet_background.xml
new file mode 100644
--- /dev/null	
+++ b/app/src/main/res/drawable/bottom_sheet_background.xml	
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <corners
+        android:bottomLeftRadius="0dp"
+        android:bottomRightRadius="0dp"
+        android:topLeftRadius="16dp"
+        android:topRightRadius="16dp" />
+    <padding
+        android:bottom="0dip"
+        android:left="0dip"
+        android:right="0dip"
+        android:top="0dip" />
+    <solid android:color="#ffffff" />
+</shape>
\ No newline at end of file
Index: app/src/main/java/it/kimoterru/walls/adapter/searsh/SearchAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.kimoterru.walls.adapter.searsh\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport androidx.annotation.LayoutRes\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.bumptech.glide.Glide\r\nimport it.kimoterru.walls.R\r\nimport it.kimoterru.walls.adapter.WallpaperClickListener\r\nimport it.kimoterru.walls.models.search.SearchItem\r\nimport it.kimoterru.walls.util.PlaceHolderDrawableHelper\r\n\r\nclass SearchAdapter(\r\n    private val data: SearchItem,\r\n    private val listener: WallpaperClickListener.WallpaperClick,\r\n    @LayoutRes val viewId: Int\r\n) : RecyclerView.Adapter<SearchAdapter.ViewHolder>() {\r\n\r\n    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\r\n        val image: ImageView = view.findViewById(R.id.card_image_display)\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        return ViewHolder(\r\n            LayoutInflater.from(parent.context).inflate(viewId, parent, false)\r\n        )\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val item = data.results[position]\r\n\r\n        holder.image.measure(item.width, item.height)\r\n        Glide.with(holder.image).load(item.urls.small)\r\n            .placeholder(PlaceHolderDrawableHelper.getBackgroundDrawable(position, item.color))\r\n            .into(holder.image)\r\n\r\n        holder.image.setOnClickListener {\r\n            listener.onWallpaperClick(\r\n                item.id,\r\n                item.urls.full,\r\n                item.links.download,\r\n                item.createdAt,\r\n                item.updatedAt,\r\n                item.user.username,\r\n                item.user.name\r\n            )\r\n        }\r\n    }\r\n\r\n    override fun getItemCount() = data.results.size\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/adapter/searsh/SearchAdapter.kt b/app/src/main/java/it/kimoterru/walls/adapter/searsh/SearchAdapter.kt
--- a/app/src/main/java/it/kimoterru/walls/adapter/searsh/SearchAdapter.kt	
+++ b/app/src/main/java/it/kimoterru/walls/adapter/searsh/SearchAdapter.kt	
@@ -37,15 +37,7 @@
             .into(holder.image)
 
         holder.image.setOnClickListener {
-            listener.onWallpaperClick(
-                item.id,
-                item.urls.full,
-                item.links.download,
-                item.createdAt,
-                item.updatedAt,
-                item.user.username,
-                item.user.name
-            )
+            listener.onWallpaperClick(item.id)
         }
     }
 
Index: app/src/main/java/it/kimoterru/walls/ui/image/SelectedImageViewModel.kt
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/ui/image/SelectedImageViewModel.kt b/app/src/main/java/it/kimoterru/walls/ui/image/SelectedImageViewModel.kt
new file mode 100644
--- /dev/null	
+++ b/app/src/main/java/it/kimoterru/walls/ui/image/SelectedImageViewModel.kt	
@@ -0,0 +1,93 @@
+package it.kimoterru.walls.ui.image
+
+import android.app.DownloadManager
+import android.content.Context
+import android.graphics.drawable.Drawable
+import android.net.Uri
+import android.widget.Toast
+import androidx.fragment.app.viewModels
+import androidx.lifecycle.MutableLiveData
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import com.bumptech.glide.Glide
+import com.bumptech.glide.load.DataSource
+import com.bumptech.glide.load.engine.GlideException
+import com.bumptech.glide.request.RequestListener
+import com.bumptech.glide.request.target.Target
+import dagger.hilt.android.lifecycle.HiltViewModel
+import it.kimoterru.walls.models.photo.PhotoItem
+import it.kimoterru.walls.repo.WallpaperRepository
+import it.kimoterru.walls.util.Constants
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+@HiltViewModel
+class SelectedImageViewModel @Inject constructor(private val repository: WallpaperRepository) :
+    ViewModel() {
+    val photoLiveData = MutableLiveData<PhotoItem>()
+
+    fun getPhoto(id: String) {
+        viewModelScope.launch(Dispatchers.IO) {
+            try {
+                val photoData = repository.getPhoto(id, Constants.CLIENT_ID)
+                photoLiveData.postValue(photoData)
+            } catch (e: Exception) {
+                e.printStackTrace()
+            }
+        }
+    }
+
+    /*Toast.makeText(context, "Start download...", Toast.LENGTH_LONG).show()
+
+    val dm: DownloadManager =
+        requireActivity().getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager
+    val fileName = "$idImage.jpg"
+    val request = DownloadManager.Request(Uri.parse(urlDownload))
+    request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_MOBILE or DownloadManager.Request.NETWORK_WIFI)
+    request.setTitle(fileName)
+    request.setDescription("Wait a second...")
+    request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
+    request.setDestinationInExternalPublicDir(
+    Environment.DIRECTORY_PICTURES,
+    "/Walls/$fileName"
+    )
+    dm.enqueue(request)
+
+    override fun onResume() {
+        super.onResume()
+        viewModel.getPhoto(args.idImage)
+    }
+
+    private val viewModel: SelectedImageViewModel by viewModels()
+    private fun initObservers() {
+        viewModel.photoLiveData.observe(viewLifecycleOwner) {
+            binding.progressBar.showProgressBar()
+            Glide.with(binding.selectedImage).load(it.urls.regular)
+                .listener(object : RequestListener<Drawable> {
+                    override fun onLoadFailed(
+                        e: GlideException?, model: Any?, target: Target<Drawable>?,
+                        isFirstResource: Boolean
+                    ): Boolean {
+                        Toast.makeText(context, "Load failed", Toast.LENGTH_SHORT).show()
+                        binding.progressBar.showProgressBar()
+                        hideFragmentComponent()
+                        return false
+                    }
+
+                    override fun onResourceReady(
+                        resource: Drawable?, model: Any?, target: Target<Drawable>?,
+                        dataSource: DataSource?, isFirstResource: Boolean
+                    ): Boolean {
+                        binding.progressBar.hideProgressBar()
+                        showFragmentComponent()
+                        return false
+                    }
+                }).into(binding.selectedImage)
+            //info()
+            download(it.id, it.links.download)
+            applyToScreen()
+        }
+    }*/
+
+}
\ No newline at end of file
Index: app/src/main/java/it/kimoterru/walls/adapter/color/ColorAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.kimoterru.walls.adapter.color\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport androidx.annotation.LayoutRes\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.bumptech.glide.Glide\r\nimport it.kimoterru.walls.R\r\nimport it.kimoterru.walls.adapter.WallpaperClickListener\r\nimport it.kimoterru.walls.models.search.SearchItem\r\nimport it.kimoterru.walls.util.PlaceHolderDrawableHelper\r\n\r\nclass ColorAdapter(\r\n    private val data: SearchItem,\r\n    private val listener: WallpaperClickListener.WallpaperClick,\r\n    @LayoutRes val viewId: Int\r\n) : RecyclerView.Adapter<ColorAdapter.ViewHolder>() {\r\n\r\n    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\r\n        val image: ImageView = view.findViewById(R.id.card_image_display)\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        return ViewHolder(\r\n            LayoutInflater.from(parent.context).inflate(viewId, parent, false)\r\n        )\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val item = data.results[position]\r\n\r\n        holder.image.measure(item.width, item.height)\r\n        Glide.with(holder.image).load(item.urls.small)\r\n            .placeholder(PlaceHolderDrawableHelper.getBackgroundDrawable(position, item.color))\r\n            .into(holder.image)\r\n\r\n        holder.image.setOnClickListener {\r\n            listener.onWallpaperClick(\r\n                item.id,\r\n                item.urls.full,\r\n                item.links.download,\r\n                item.createdAt,\r\n                item.updatedAt,\r\n                item.user.username,\r\n                item.user.name\r\n            )\r\n        }\r\n    }\r\n\r\n    override fun getItemCount() = data.results.size\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/adapter/color/ColorAdapter.kt b/app/src/main/java/it/kimoterru/walls/adapter/color/ColorAdapter.kt
--- a/app/src/main/java/it/kimoterru/walls/adapter/color/ColorAdapter.kt	
+++ b/app/src/main/java/it/kimoterru/walls/adapter/color/ColorAdapter.kt	
@@ -37,15 +37,7 @@
             .into(holder.image)
 
         holder.image.setOnClickListener {
-            listener.onWallpaperClick(
-                item.id,
-                item.urls.full,
-                item.links.download,
-                item.createdAt,
-                item.updatedAt,
-                item.user.username,
-                item.user.name
-            )
+            listener.onWallpaperClick(item.id)
         }
     }
 
Index: app/src/main/java/it/kimoterru/walls/adapter/WallpaperClickListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.kimoterru.walls.adapter\r\n\r\ninterface WallpaperClickListener {\r\n    interface WallpaperClick {\r\n        fun onWallpaperClick(\r\n            id: String,\r\n            urlImage: String,\r\n            urlDownload: String,\r\n            created: String,\r\n            updated: String,\r\n            userName: String,\r\n            name: String,\r\n        )\r\n    }\r\n\r\n    fun onColorClick(\r\n        name: String,\r\n    )\r\n\r\n    fun onCategoryClick(\r\n        name: String,\r\n        tittle: String,\r\n        totalPhotos: Int\r\n    )\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/adapter/WallpaperClickListener.kt b/app/src/main/java/it/kimoterru/walls/adapter/WallpaperClickListener.kt
--- a/app/src/main/java/it/kimoterru/walls/adapter/WallpaperClickListener.kt	
+++ b/app/src/main/java/it/kimoterru/walls/adapter/WallpaperClickListener.kt	
@@ -3,13 +3,7 @@
 interface WallpaperClickListener {
     interface WallpaperClick {
         fun onWallpaperClick(
-            id: String,
-            urlImage: String,
-            urlDownload: String,
-            created: String,
-            updated: String,
-            userName: String,
-            name: String,
+            id: String
         )
     }
 
Index: app/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <style name=\"CircularProgress\" parent=\"Theme.AppCompat.Light\">\r\n        <item name=\"colorAccent\">@android:color/holo_blue_dark</item>\r\n    </style>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/styles.xml b/app/src/main/res/values/styles.xml
--- a/app/src/main/res/values/styles.xml	
+++ b/app/src/main/res/values/styles.xml	
@@ -3,4 +3,14 @@
     <style name="CircularProgress" parent="Theme.AppCompat.Light">
         <item name="colorAccent">@android:color/holo_blue_dark</item>
     </style>
+
+    <style name="AppBottomSheetDialogTheme"
+        parent="Theme.Design.Light.BottomSheetDialog">
+        <item name="bottomSheetStyle">@style/AppModalStyle</item>
+    </style>
+
+    <style name="AppModalStyle"
+        parent="Widget.Design.BottomSheet.Modal">
+        <item name="android:background">@drawable/bottom_sheet_background</item>
+    </style>
 </resources>
\ No newline at end of file
Index: app/src/main/java/it/kimoterru/walls/adapter/category/CategoryAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.kimoterru.walls.adapter.category\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport androidx.annotation.LayoutRes\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.bumptech.glide.Glide\r\nimport it.kimoterru.walls.R\r\nimport it.kimoterru.walls.adapter.WallpaperClickListener\r\nimport it.kimoterru.walls.models.photo.PhotoItem\r\nimport it.kimoterru.walls.util.PlaceHolderDrawableHelper\r\n\r\nclass CategoryAdapter(\r\n    private val data: List<PhotoItem>,\r\n    private val listener: WallpaperClickListener.WallpaperClick,\r\n    @LayoutRes val viewId: Int,\r\n) : RecyclerView.Adapter<CategoryAdapter.ViewHolder>() {\r\n\r\n    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {\r\n        val image: ImageView = view.findViewById(R.id.card_image_display)\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n        return ViewHolder(\r\n            LayoutInflater.from(parent.context).inflate(viewId, parent, false)\r\n        )\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n        val item = data[position]\r\n\r\n        holder.image.measure(item.width, item.height)\r\n        Glide.with(holder.image).load(item.urls.small)\r\n            .placeholder(PlaceHolderDrawableHelper.getBackgroundDrawable(position, item.color))\r\n            .into(holder.image)\r\n\r\n        holder.image.setOnClickListener {\r\n            listener.onWallpaperClick(\r\n                item.id,\r\n                item.urls.full,\r\n                item.links.download,\r\n                item.createdAt,\r\n                item.updatedAt,\r\n                item.user.username,\r\n                item.user.name\r\n            )\r\n        }\r\n    }\r\n\r\n    override fun getItemCount() = data.size\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/adapter/category/CategoryAdapter.kt b/app/src/main/java/it/kimoterru/walls/adapter/category/CategoryAdapter.kt
--- a/app/src/main/java/it/kimoterru/walls/adapter/category/CategoryAdapter.kt	
+++ b/app/src/main/java/it/kimoterru/walls/adapter/category/CategoryAdapter.kt	
@@ -37,15 +37,7 @@
             .into(holder.image)
 
         holder.image.setOnClickListener {
-            listener.onWallpaperClick(
-                item.id,
-                item.urls.full,
-                item.links.download,
-                item.createdAt,
-                item.updatedAt,
-                item.user.username,
-                item.user.name
-            )
+            listener.onWallpaperClick(item.id)
         }
     }
 
Index: app/src/main/java/it/kimoterru/walls/ui/home/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.kimoterru.walls.ui.home\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.view.inputmethod.EditorInfo\r\nimport android.widget.Toast\r\nimport androidx.core.widget.addTextChangedListener\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.Navigation\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport it.kimoterru.walls.R\r\nimport it.kimoterru.walls.adapter.WallpaperClickListener\r\nimport it.kimoterru.walls.adapter.home.CategoryAdapter\r\nimport it.kimoterru.walls.adapter.home.ColorAdapter\r\nimport it.kimoterru.walls.adapter.home.LatestAdapter\r\nimport it.kimoterru.walls.databinding.FragmentHomeBinding\r\nimport it.kimoterru.walls.models.categories.TopicItem\r\nimport it.kimoterru.walls.models.photo.PhotoItem\r\nimport it.kimoterru.walls.util.Status\r\nimport it.kimoterru.walls.util.TopicsOrder\r\n\r\n@AndroidEntryPoint\r\nclass HomeFragment : Fragment(R.layout.fragment_home), WallpaperClickListener.WallpaperClick, WallpaperClickListener {\r\n    private var _binding: FragmentHomeBinding? = null\r\n    private val binding get() = _binding!!\r\n\r\n    private var viewModel: HomeViewModel? = null\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n        _binding = FragmentHomeBinding.inflate(inflater)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        viewModel = ViewModelProvider(this).get(HomeViewModel::class.java)\r\n\r\n        initObservers()\r\n        initSearch()\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        viewModel?.getHomeScreen()\r\n        viewModel?.getTopics(TopicsOrder.POSITION)\r\n    }\r\n\r\n    private fun initObservers() {\r\n        viewModel?.homeResponseLiveData?.observe(viewLifecycleOwner, {\r\n            when (it.status) {\r\n                Status.SUCCESS -> {\r\n                    displayLatest(it.data)\r\n                    hideShimmerEffectLatestWallpapers()\r\n                }\r\n                Status.ERROR -> {\r\n                    noNetworkConnect()\r\n                }\r\n                else -> {}\r\n            }\r\n        })\r\n        viewModel?.topicsLiveData?.observe(viewLifecycleOwner, {\r\n            when (it.status) {\r\n                Status.SUCCESS -> {\r\n                    displayTopics(it.data)\r\n                    hideShimmerEffectCategories()\r\n                    displayColors()\r\n                }\r\n                Status.ERROR -> {\r\n                    Toast.makeText(context, it.message, Toast.LENGTH_LONG).show()\r\n                }\r\n                else -> {}\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun hideShimmerEffectLatestWallpapers() {\r\n        binding.shimmerLayout.stopShimmer()\r\n        binding.shimmerLayout.visibility = View.GONE\r\n    }\r\n\r\n    private fun hideShimmerEffectCategories() {\r\n        binding.shimmerLayoutCategories.stopShimmer()\r\n        binding.shimmerLayoutCategories.visibility = View.GONE\r\n\r\n        binding.shimmerLayoutColor.stopShimmer()\r\n        binding.shimmerLayoutColor.visibility = View.GONE\r\n    }\r\n\r\n    private fun noNetworkConnect() {\r\n        Navigation.findNavController(requireView()).navigate(R.id.action_fragment_home_to_fragment_no_internet)\r\n    }\r\n\r\n    private fun displayLatest(response: List<PhotoItem>?) {\r\n        binding.recyclerLatestWallpapers.adapter = LatestAdapter(response ?: listOf(), this, R.layout.card_image)\r\n    }\r\n\r\n    private fun displayColors() {\r\n        binding.recyclerBestColorTone.adapter = ColorAdapter(this, R.layout.card_color)\r\n    }\r\n\r\n    private fun displayTopics(list: List<TopicItem>?) {\r\n        binding.recyclerCategories.adapter = CategoryAdapter(list!!, this)\r\n        binding.recyclerCategories.isNestedScrollingEnabled = false\r\n    }\r\n\r\n    private fun initSearch() {\r\n        binding.findImage.addTextChangedListener {\r\n            if (it.toString().isNotEmpty()) {\r\n                binding.searchImage.setImageResource(R.drawable.cancel)\r\n                binding.searchImage.setOnClickListener {\r\n                    binding.findImage.text.clear()\r\n                }\r\n            } else {\r\n                binding.searchImage.setImageResource(R.drawable.search)\r\n            }\r\n        }\r\n        binding.findImage.setOnEditorActionListener { _, actionId, _ ->\r\n            if (actionId == EditorInfo.IME_ACTION_SEARCH) {\r\n                val query: String = binding.findImage.text.toString()\r\n                if (query.isNotEmpty()) {\r\n                    Navigation.findNavController(requireView())\r\n                        .navigate(HomeFragmentDirections.actionFragmentHomeToFragmentSearch(query))\r\n                } else {\r\n                    Toast.makeText(context, \"Empty!\", Toast.LENGTH_LONG).show()\r\n                }\r\n                true\r\n            } else false\r\n        }\r\n    }\r\n\r\n    override fun onWallpaperClick(\r\n        id: String,\r\n        urlImage: String,\r\n        urlDownload: String,\r\n        created: String,\r\n        updated: String,\r\n        userName: String,\r\n        name: String\r\n    ) {\r\n        Navigation.findNavController(requireView())\r\n            .navigate(\r\n                HomeFragmentDirections.actionFragmentHomeToFragmentSelectedImage(\r\n                    id,\r\n                    urlImage,\r\n                    urlDownload,\r\n                    created,\r\n                    updated,\r\n                    userName,\r\n                    name\r\n                ))\r\n    }\r\n\r\n    override fun onColorClick(name: String) {\r\n        Navigation.findNavController(requireView())\r\n            .navigate(HomeFragmentDirections.actionFragmentHomeToFragmentColors(\r\n                name\r\n            ))\r\n    }\r\n\r\n    override fun onCategoryClick(name: String, tittle: String, totalPhotos: Int) {\r\n        Navigation.findNavController(requireView())\r\n            .navigate(HomeFragmentDirections.actionFragmentHomeToFragmentCategories(\r\n                name,\r\n                tittle,\r\n                totalPhotos\r\n            ))\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/ui/home/HomeFragment.kt b/app/src/main/java/it/kimoterru/walls/ui/home/HomeFragment.kt
--- a/app/src/main/java/it/kimoterru/walls/ui/home/HomeFragment.kt	
+++ b/app/src/main/java/it/kimoterru/walls/ui/home/HomeFragment.kt	
@@ -8,7 +8,7 @@
 import android.widget.Toast
 import androidx.core.widget.addTextChangedListener
 import androidx.fragment.app.Fragment
-import androidx.lifecycle.ViewModelProvider
+import androidx.fragment.app.viewModels
 import androidx.navigation.Navigation
 import dagger.hilt.android.AndroidEntryPoint
 import it.kimoterru.walls.R
@@ -27,7 +27,7 @@
     private var _binding: FragmentHomeBinding? = null
     private val binding get() = _binding!!
 
-    private var viewModel: HomeViewModel? = null
+    private val viewModel: HomeViewModel by viewModels()
 
     override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
         _binding = FragmentHomeBinding.inflate(inflater)
@@ -36,7 +36,6 @@
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
-        viewModel = ViewModelProvider(this).get(HomeViewModel::class.java)
 
         initObservers()
         initSearch()
@@ -44,12 +43,12 @@
 
     override fun onResume() {
         super.onResume()
-        viewModel?.getHomeScreen()
-        viewModel?.getTopics(TopicsOrder.POSITION)
+        viewModel.getHomeScreen()
+        viewModel.getTopics(TopicsOrder.POSITION)
     }
 
     private fun initObservers() {
-        viewModel?.homeResponseLiveData?.observe(viewLifecycleOwner, {
+        viewModel.homeResponseLiveData.observe(viewLifecycleOwner, {
             when (it.status) {
                 Status.SUCCESS -> {
                     displayLatest(it.data)
@@ -58,10 +57,11 @@
                 Status.ERROR -> {
                     noNetworkConnect()
                 }
-                else -> {}
+                else -> {
+                }
             }
         })
-        viewModel?.topicsLiveData?.observe(viewLifecycleOwner, {
+        viewModel.topicsLiveData.observe(viewLifecycleOwner, {
             when (it.status) {
                 Status.SUCCESS -> {
                     displayTopics(it.data)
@@ -71,7 +71,8 @@
                 Status.ERROR -> {
                     Toast.makeText(context, it.message, Toast.LENGTH_LONG).show()
                 }
-                else -> {}
+                else -> {
+                }
             }
         })
     }
@@ -131,33 +132,16 @@
         }
     }
 
-    override fun onWallpaperClick(
-        id: String,
-        urlImage: String,
-        urlDownload: String,
-        created: String,
-        updated: String,
-        userName: String,
-        name: String
-    ) {
+    override fun onWallpaperClick(id: String) {
         Navigation.findNavController(requireView())
             .navigate(
-                HomeFragmentDirections.actionFragmentHomeToFragmentSelectedImage(
-                    id,
-                    urlImage,
-                    urlDownload,
-                    created,
-                    updated,
-                    userName,
-                    name
-                ))
+                HomeFragmentDirections.actionFragmentHomeToFragmentSelectedImage(id)
+            )
     }
 
     override fun onColorClick(name: String) {
         Navigation.findNavController(requireView())
-            .navigate(HomeFragmentDirections.actionFragmentHomeToFragmentColors(
-                name
-            ))
+            .navigate(HomeFragmentDirections.actionFragmentHomeToFragmentColors(name))
     }
 
     override fun onCategoryClick(name: String, tittle: String, totalPhotos: Int) {
Index: app/src/main/java/it/kimoterru/walls/network/ApiService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.kimoterru.walls.network\r\n\r\nimport it.kimoterru.walls.models.photo.PhotoItem\r\nimport it.kimoterru.walls.models.categories.TopicItem\r\nimport it.kimoterru.walls.models.search.SearchItem\r\nimport retrofit2.http.GET\r\nimport retrofit2.http.Path\r\nimport retrofit2.http.Query\r\n\r\ninterface ApiService {\r\n    companion object {\r\n        const val BASE_URL = \"https://api.unsplash.com/\"\r\n    }\r\n\r\n    @GET(\"/photos\")\r\n    suspend fun getLatest(\r\n        @Query(\"client_id\") clientId: String,\r\n        @Query(\"page\") page: Int,\r\n    ): List<PhotoItem>\r\n\r\n    @GET(\"/photos\")\r\n    suspend fun getTopList(\r\n        @Query(\"client_id\") clientId: String,\r\n        @Query(\"page\") page: Int,\r\n        @Query(\"per_page\") per_page: Int,\r\n        @Query(\"order_by\") order_by: String\r\n    ): List<PhotoItem>\r\n\r\n    @GET(\"/photos/{id}\")\r\n    suspend fun getPhoto(\r\n        @Path(\"id\") id: String,\r\n        @Query(\"client_id\") clientId: String\r\n    ): List<PhotoItem>\r\n\r\n    @GET(\"/topics\")\r\n    suspend fun getTopicsList(\r\n        @Query(\"client_id\") clientId: String,\r\n        @Query(\"page\") page: Int,\r\n        @Query(\"per_page\") per_page: Int,\r\n        @Query(\"order_by\") order_by: String\r\n    ): List<TopicItem>\r\n\r\n    @GET(\"/topics/{id_or_slug}/photos\")\r\n    suspend fun getTopicImage(\r\n        @Path(\"id_or_slug\") id_or_slug: String,\r\n        @Query(\"client_id\") clientId: String,\r\n        @Query(\"per_page\") per_page: Int,\r\n        @Query(\"order_by\") order_by: String\r\n    ): List<PhotoItem>\r\n\r\n    @GET(\"/search/photos\")\r\n    suspend fun getColorImage(\r\n        @Query(\"query\") query: String,\r\n        @Query(\"color\") color: String,\r\n        @Query(\"client_id\") clientId: String,\r\n        @Query(\"per_page\") per_page: Int,\r\n        @Query(\"order_by\") order_by: String\r\n    ): SearchItem\r\n\r\n    @GET(\"/search/photos\")\r\n    suspend fun getSearchImage(\r\n        @Query(\"query\") query: String,\r\n        @Query(\"client_id\") clientId: String,\r\n        @Query(\"per_page\") per_page: Int,\r\n        @Query(\"order_by\") order_by: String\r\n    ): SearchItem\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/network/ApiService.kt b/app/src/main/java/it/kimoterru/walls/network/ApiService.kt
--- a/app/src/main/java/it/kimoterru/walls/network/ApiService.kt	
+++ b/app/src/main/java/it/kimoterru/walls/network/ApiService.kt	
@@ -30,7 +30,7 @@
     suspend fun getPhoto(
         @Path("id") id: String,
         @Query("client_id") clientId: String
-    ): List<PhotoItem>
+    ): PhotoItem
 
     @GET("/topics")
     suspend fun getTopicsList(
Index: app/src/main/java/it/kimoterru/walls/ui/color/ColorsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.kimoterru.walls.ui.color\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.Navigation\r\nimport androidx.navigation.fragment.navArgs\r\nimport androidx.recyclerview.widget.StaggeredGridLayoutManager\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport it.kimoterru.walls.R\r\nimport it.kimoterru.walls.adapter.WallpaperClickListener\r\nimport it.kimoterru.walls.adapter.color.ColorAdapter\r\nimport it.kimoterru.walls.databinding.FragmentColorsBinding\r\nimport it.kimoterru.walls.models.search.SearchItem\r\nimport it.kimoterru.walls.util.Status\r\nimport it.kimoterru.walls.util.TopicsOrder\r\n\r\n@AndroidEntryPoint\r\nclass ColorsFragment : Fragment(R.layout.fragment_colors),\r\n    WallpaperClickListener.WallpaperClick {\r\n    private var _binding: FragmentColorsBinding? = null\r\n    private val binding get() = _binding!!\r\n\r\n    private val args: ColorsFragmentArgs by navArgs()\r\n    private var viewModel: ColorsViewModel? = null\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?,\r\n    ): View {\r\n        _binding = FragmentColorsBinding.inflate(inflater)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        viewModel = ViewModelProvider(this).get(ColorsViewModel::class.java)\r\n\r\n        initObservers()\r\n        setFragmentComponent()\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        viewModel?.getImageColors(args.tittle, args.tittle, TopicsOrder.LATEST)\r\n    }\r\n\r\n    private fun setFragmentComponent() {\r\n        binding.color.text = args.tittle\r\n    }\r\n\r\n    private fun initObservers() {\r\n        viewModel?.imageColorLiveData?.observe(viewLifecycleOwner, {\r\n            when (it.status) {\r\n                Status.SUCCESS -> {\r\n                    displayImage(it.data!!)\r\n                }\r\n                Status.ERROR -> {\r\n                    Toast.makeText(context, it.message, Toast.LENGTH_LONG).show()\r\n                }\r\n                else -> {\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun displayImage(response: SearchItem) {\r\n        val sGrid = StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL)\r\n        sGrid.gapStrategy = StaggeredGridLayoutManager.GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS\r\n        binding.recyclerImageColors.layoutManager = sGrid\r\n\r\n        binding.recyclerImageColors.adapter =\r\n            ColorAdapter(response, this, R.layout.card_image_display)\r\n    }\r\n\r\n    override fun onWallpaperClick(\r\n        id: String,\r\n        urlImage: String,\r\n        urlDownload: String,\r\n        created: String,\r\n        updated: String,\r\n        userName: String,\r\n        name: String,\r\n    ) {\r\n        Navigation.findNavController(requireView())\r\n            .navigate(\r\n                ColorsFragmentDirections.actionFragmentColorsToFragmentSelectedImage(\r\n                    id,\r\n                    urlImage,\r\n                    urlDownload,\r\n                    created,\r\n                    updated,\r\n                    userName,\r\n                    name\r\n                ))\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/ui/color/ColorsFragment.kt b/app/src/main/java/it/kimoterru/walls/ui/color/ColorsFragment.kt
--- a/app/src/main/java/it/kimoterru/walls/ui/color/ColorsFragment.kt	
+++ b/app/src/main/java/it/kimoterru/walls/ui/color/ColorsFragment.kt	
@@ -6,7 +6,7 @@
 import android.view.ViewGroup
 import android.widget.Toast
 import androidx.fragment.app.Fragment
-import androidx.lifecycle.ViewModelProvider
+import androidx.fragment.app.viewModels
 import androidx.navigation.Navigation
 import androidx.navigation.fragment.navArgs
 import androidx.recyclerview.widget.StaggeredGridLayoutManager
@@ -26,7 +26,7 @@
     private val binding get() = _binding!!
 
     private val args: ColorsFragmentArgs by navArgs()
-    private var viewModel: ColorsViewModel? = null
+    private val viewModel: ColorsViewModel by viewModels()
 
     override fun onCreateView(
         inflater: LayoutInflater,
@@ -39,7 +39,6 @@
 
     override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
         super.onViewCreated(view, savedInstanceState)
-        viewModel = ViewModelProvider(this).get(ColorsViewModel::class.java)
 
         initObservers()
         setFragmentComponent()
@@ -47,7 +46,7 @@
 
     override fun onResume() {
         super.onResume()
-        viewModel?.getImageColors(args.tittle, args.tittle, TopicsOrder.LATEST)
+        viewModel.getImageColors(args.tittle, args.tittle, TopicsOrder.LATEST)
     }
 
     private fun setFragmentComponent() {
@@ -55,7 +54,7 @@
     }
 
     private fun initObservers() {
-        viewModel?.imageColorLiveData?.observe(viewLifecycleOwner, {
+        viewModel.imageColorLiveData.observe(viewLifecycleOwner, {
             when (it.status) {
                 Status.SUCCESS -> {
                     displayImage(it.data!!)
@@ -78,25 +77,10 @@
             ColorAdapter(response, this, R.layout.card_image_display)
     }
 
-    override fun onWallpaperClick(
-        id: String,
-        urlImage: String,
-        urlDownload: String,
-        created: String,
-        updated: String,
-        userName: String,
-        name: String,
-    ) {
+    override fun onWallpaperClick(id: String) {
         Navigation.findNavController(requireView())
             .navigate(
-                ColorsFragmentDirections.actionFragmentColorsToFragmentSelectedImage(
-                    id,
-                    urlImage,
-                    urlDownload,
-                    created,
-                    updated,
-                    userName,
-                    name
-                ))
+                ColorsFragmentDirections.actionFragmentColorsToFragmentSelectedImage(id)
+            )
     }
 }
\ No newline at end of file
Index: app/src/main/java/it/kimoterru/walls/ui/search/SearchFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.kimoterru.walls.ui.search\r\n\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.navigation.Navigation\r\nimport androidx.navigation.fragment.navArgs\r\nimport androidx.recyclerview.widget.StaggeredGridLayoutManager\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport it.kimoterru.walls.R\r\nimport it.kimoterru.walls.adapter.WallpaperClickListener\r\nimport it.kimoterru.walls.adapter.searsh.SearchAdapter\r\nimport it.kimoterru.walls.databinding.FragmentSearchBinding\r\nimport it.kimoterru.walls.models.search.SearchItem\r\nimport it.kimoterru.walls.util.Status\r\nimport it.kimoterru.walls.util.TopicsOrder\r\n\r\n@AndroidEntryPoint\r\nclass SearchFragment : Fragment(R.layout.fragment_search),\r\n    WallpaperClickListener.WallpaperClick {\r\n    private var _binding: FragmentSearchBinding? = null\r\n    private val binding get() = _binding!!\r\n\r\n    private val args: SearchFragmentArgs by navArgs()\r\n    private var viewModel: SearchViewModel? = null\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n        _binding = FragmentSearchBinding.inflate(inflater)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        binding.search.text = args.query\r\n        viewModel = ViewModelProvider(this).get(SearchViewModel::class.java)\r\n\r\n        initObservers()\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        viewModel?.getImageSearch(args.query, TopicsOrder.LATEST)\r\n    }\r\n\r\n    private fun initObservers() {\r\n        viewModel?.imageLiveData?.observe(viewLifecycleOwner, {\r\n            when (it.status) {\r\n                Status.SUCCESS -> {\r\n                    displayImage(it.data!!)\r\n                }\r\n                Status.ERROR -> {\r\n                    Toast.makeText(context, it.message, Toast.LENGTH_LONG).show()\r\n                }\r\n                else -> {\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun displayImage(response: SearchItem) {\r\n        val sGrid = StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL)\r\n        sGrid.gapStrategy = StaggeredGridLayoutManager.GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS\r\n        binding.recyclerImageSearch.layoutManager = sGrid\r\n\r\n        binding.recyclerImageSearch.adapter =\r\n            SearchAdapter(response, this, R.layout.card_image_display)\r\n    }\r\n\r\n    override fun onWallpaperClick(\r\n        id: String,\r\n        urlImage: String,\r\n        urlDownload: String,\r\n        created: String,\r\n        updated: String,\r\n        userName: String,\r\n        name: String,\r\n    ) {\r\n        Navigation.findNavController(requireView())\r\n            .navigate(\r\n                SearchFragmentDirections.actionFragmentSearchToFragmentSelectedImage(\r\n                    id,\r\n                    urlImage,\r\n                    urlDownload,\r\n                    created,\r\n                    updated,\r\n                    userName,\r\n                    name\r\n                ))\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/it/kimoterru/walls/ui/search/SearchFragment.kt b/app/src/main/java/it/kimoterru/walls/ui/search/SearchFragment.kt
--- a/app/src/main/java/it/kimoterru/walls/ui/search/SearchFragment.kt	
+++ b/app/src/main/java/it/kimoterru/walls/ui/search/SearchFragment.kt	
@@ -71,24 +71,13 @@
     }
 
     override fun onWallpaperClick(
-        id: String,
-        urlImage: String,
-        urlDownload: String,
-        created: String,
-        updated: String,
-        userName: String,
-        name: String,
+        id: String
     ) {
         Navigation.findNavController(requireView())
             .navigate(
                 SearchFragmentDirections.actionFragmentSearchToFragmentSelectedImage(
-                    id,
-                    urlImage,
-                    urlDownload,
-                    created,
-                    updated,
-                    userName,
-                    name
-                ))
+                    id
+                )
+            )
     }
 }
\ No newline at end of file
